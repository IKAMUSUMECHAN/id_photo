# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'photo.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import photo
import edit_photo
import win32print
from PyQt5.QtCore import Qt
from win32api import ShellExecute
from tkinter import messagebox
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog
from PIL import Image
from PyQt5.QtGui import QPixmap

# 初始化白色图片
image_default = Image.new('RGB', (1500, 2000), color='white')
# 保存
image_default.save('done.jpg', 'JPEG')
# 打开
# im = Image.open('done.jpg')
image_default = Image.open('done.jpg')
# 初始化图片列表
image_list = []
# 初始化图片列表当前显示序号
image_list_num = 0
# 初始化图片列表图片张数
image_sum_num = 0
# 初始化打印列表
printer_list = []

class Ui_MainWindow(object):

    def __init__(self):
        # 初始化
        self.pushButton_8 = None
        self.pushButton_next = None
        self.pushButton_prev = None
        self.statusbar = None
        self.pushButton_5 = None
        self.pushButton_4 = None
        self.pushButton_3 = None
        self.pushButton_2 = None
        self.centralwidget = None
        self.pushButton = None

    def setupUi(self, MainWindow):

        # 生成1英寸照片方法
        def b1c():
            global image_list_num
            if image_list:
                for x in range(image_sum_num):
                    temp_im = Image.open(image_list[x-1])
                    edit_photo.layout_photo_6_1(edit_photo.resize_photo(edit_photo.cut_photo(temp_im, 1), 1)).save('done'+str(x)+'.jpg')
                # 展示生成后的第一张
                pixmap = QPixmap('done0.jpg')
                self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
                #  序列号给它同步到第一张
                image_list_num = 0
                self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))
        # 生成2英寸照片方法
        def b2c():
            global image_list_num
            if image_list:
                for x in range(image_sum_num):
                    temp_im = Image.open(image_list[x - 1])
                    edit_photo.layout_photo_6_2(edit_photo.resize_photo(edit_photo.cut_photo(temp_im, 2), 2)).save('done'+str(x)+'.jpg')
                pixmap = QPixmap('done0.jpg')
                self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
                image_list_num = 0
                self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))
        # 生成3英寸照片方法
        def b3c():
            global image_list_num
            if image_list:
                for x in range(image_sum_num):
                    temp_im = Image.open(image_list[x - 1])
                    edit_photo.layout_photo_6_3(edit_photo.resize_photo(edit_photo.cut_photo(temp_im, 3), 3).rotate(90, expand=True)).save('done'+str(x)+'.jpg')
                pixmap = QPixmap('done0.jpg')
                self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
                image_list_num = 0
                self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))
        # 生成1混2英寸照片方法
        def b4c():
            global image_list_num
            if image_list:
                for x in range(image_sum_num):
                    temp_im = Image.open(image_list[x - 1])
                    edit_photo.layout_photo_6_mix1(edit_photo.resize_photo(edit_photo.cut_photo(temp_im, 1), 1).rotate(90, expand=True),
                                         edit_photo.resize_photo(
                                             edit_photo.cut_photo(temp_im, 2), 2)).save('done'+str(x)+'.jpg')

                pixmap = QPixmap('done0.jpg')
                self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
                image_list_num = 0
                self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))
        '''
        # 打开文件方法
        def openFile():
            # 更新主图
            global im
            fileName, fileType = QtWidgets.QFileDialog.getOpenFileName(None, "选取文件", "./",
                                                                       "All Files (*);;Text Files (*.txt)")
            if fileName:
                im = Image.open(fileName).convert('RGB')
                pixmap = QPixmap(fileName)
                edit_photo.resize_photo(im, 0).save('done.jpg')
                self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
                '''
        # 打开多个文件方法
        def open_Files():
            global image_list
            global printer_list
            global image_sum_num
            global image_list_num
            # 每次重新打开进行初始化
            image_list = []
            printer_list = []
            image_sum_num = 0
            image_list_num = 0
            self.numview.setText(str(image_list_num) + "/" + str(len(image_list)))
            pixmap = QPixmap('done.jpg')
            self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
            # 初始化结束，调用选择文件框
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            files, _ = QtWidgets.QFileDialog.getOpenFileNames(None, "选择图片", "", "All Files (*);;Images (*.jpg *.png)")
            if files:
                for x in range(len(files)):
                    # 转换为RGB
                    im_temp = Image.open(files[x-1]).convert('RGB')
                    # 调整输入的图片
                    # edit_photo.resize_photo(im_temp, 0).save('done'+str(x)+'.jpg')
                    im_temp.save('done' + str(x) + '.jpg')
                    # 保存图片编号
                    printer_list.append('done'+str(x)+'.jpg')
                    # print(file)  # 处理选中的图片文件
                # 存储获取到的图片列表保存到全局列表中
                image_list = files
                # 更新输入了几张图片
                image_sum_num = len(files)
                # print(files)
                # print(printer_list)
                # 展示获取到的第一张图片
                pixmap = QPixmap(printer_list[0])
                self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
                # 更新序列号
                self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))
        #显示下一张方法
        def showNextImage():
            global image_list_num
            if len(printer_list) == 0:
                    return
            image_list_num += 1
            if image_list_num >= len(printer_list):
                image_list_num = 0
            img_path = printer_list[image_list_num]
            pixmap = QPixmap(img_path)
            self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
            self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))
        # 显示前一张方法
        def showPrevImage():
            global image_list_num
            if len(printer_list) == 0:
                    return
            image_list_num -= 1
            if image_list_num < 0:
                image_list_num = len(printer_list) - 1

            img_path = printer_list[image_list_num]
            pixmap = QPixmap(img_path)
            self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
            self.numview.setText(str(image_list_num+1) + "/" + str(len(image_list)))

        '''
        def showSettingsDialog():
            self.printer.setPageSize(QPrinter.A3)
            settingsDialog = QPageSetupDialog(self.printer)  # 在当前窗口针对打印机对象弹出设置对话框
            settingsDialog.exec()  # 循环
            '''

        '''def showPrintDialog():
            printerDialog = QPrintDialog(self.printer)  # 在当前窗口针对打印机对象弹出打印对话框
            # printerDialog.exec()表示等待用户的操作，QDialog.Accepted表示用户操作了类似于确认的操作，当用户的操作时确认的操作时，执行if下面的语句
            if QDialog.Accepted == printerDialog.exec():
                painter = QPainter(self.printer)
                pixmap = QPixmap('done.jpg')
                painter.drawPixmap(0, 0, pixmap)'''

        '''def get_connected_printers():
            printers = []
            default_printer = win32print.GetDefaultPrinter()
            flags = win32print.PRINTER_ENUM_LOCAL | win32print.PRINTER_ENUM_CONNECTIONS
            for printer in win32print.EnumPrinters(flags):
                printers.append(printer[2])
            print(printers)
            combo_box = QComboBox()

            return printers'''
        # 调用打印机方法
        def printfile():
            selected_printer = None  # 获取选中的打印机
            # 待打印文件路径list
            self.file_paths = printer_list
            if self.file_paths:
                # 遍历打印路径list
                for file_path in self.file_paths:
                    try:
                        # 打开文件并发送到选中的打印机
                        hprinter = win32print.OpenPrinter(selected_printer)
                        win32print.ClosePrinter(hprinter)
                        command = f"/d \"{selected_printer}\" /p"
                        ShellExecute(0, "print", file_path, command, ".", 0)
                    except Exception as e:
                        messagebox.showerror("错误", f"打印过程中发生错误：{str(e)}")
        # 打印当前显示的方法
        def printfile_now():
            selected_printer = None  # 获取选中的打印机
            # 待打印文件路径list
            #self.file_paths = ['done'+str(image_list_num)+'.jpg']
            self.file_paths = []
            if printer_list:
                self.file_paths.append(printer_list[image_list_num])
            if self.file_paths:
                # 遍历打印路径list
                for file_path in self.file_paths:
                    try:
                        # 打开文件并发送到选中的打印机
                        hprinter = win32print.OpenPrinter(selected_printer)
                        win32print.ClosePrinter(hprinter)
                        command = f"/d \"{selected_printer}\" /p"
                        ShellExecute(0, "print", file_path, command, ".", 0)
                    except Exception as e:
                        messagebox.showerror("错误", f"打印过程中发生错误：{str(e)}")

        # ui界面
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 550)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # 1英寸按钮
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(40, 100, 151, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(b1c)
        # 2英寸按钮
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 150, 151, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(b2c)
        # 3英寸按钮
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 200, 151, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(b3c)
        # 1混2按钮
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(40, 250, 151, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(b4c)
        # 打开文件按钮
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(40, 20, 151, 51))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(open_Files)
        # 上一张按钮
        self.pushButton_prev = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_prev.setGeometry(QtCore.QRect(205, 450, 151, 41))
        self.pushButton_prev.setObjectName("pushButton_prev")
        self.pushButton_prev.clicked.connect(showPrevImage)
        # 下一张按钮
        self.pushButton_next = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_next.setGeometry(QtCore.QRect(365, 450, 151, 41))
        self.pushButton_next.setObjectName("pushButton_next")
        self.pushButton_next.clicked.connect(showNextImage)
        '''
        # 打印机列表
        self.printer_box = QtWidgets.QComboBox(self.centralwidget)
        self.printer_box.setGeometry(QtCore.QRect(40, 300, 151, 41))
        self.printer_box.setObjectName("printer_box")
        self.printer_box.addItems(["666"])'''
        # 打印按钮
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(40, 350, 151, 41))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(printfile)
        # 打印当前按钮
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(40, 300, 151, 41))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(printfile_now)
        # 图片显示窗口
        self.ImageView = QtWidgets.QLabel(self.centralwidget)
        self.ImageView.setGeometry(QtCore.QRect(210, 10, 300, 400))
        # 给图片显示窗口加一个边框
        self.ImageView.setStyleSheet("QLabel {"
                        "  border: 2px solid red;"
                        "  padding: 10px;"
                        "}")
        pixmap = QPixmap('done.jpg')
        self.ImageView.setPixmap(pixmap.scaled(self.ImageView.size(), aspectRatioMode=Qt.KeepAspectRatio))
        self.ImageView.setObjectName("graphicsView")
        # 当前序列号
        self.numview = QtWidgets.QLabel(self.centralwidget)
        self.numview.setGeometry(QtCore.QRect(310, 420, 100, 20))
        self.numview.setStyleSheet("QLabel {")
        self.numview.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.numview.setObjectName("numview")
        self.numview.setText(str(image_list_num)+"/"+str(len(image_list)))
        self.numview.setAlignment(Qt.AlignCenter)

        # 创建打印机对象
        # self.printer = QPrinter()

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "证件照生成工具"))
        self.pushButton.setText(_translate("MainWindow", "1寸证件照"))
        self.pushButton_2.setText(_translate("MainWindow", "2寸证件照"))
        self.pushButton_3.setText(_translate("MainWindow", "3寸证件照"))
        self.pushButton_4.setText(_translate("MainWindow", "1寸2寸混合证件照"))
        self.pushButton_5.setText(_translate("MainWindow", "选择文件"))
        self.pushButton_7.setText(_translate("MainWindow", "打印全部"))
        self.pushButton_8.setText(_translate("MainWindow", "打印当前"))
        self.pushButton_prev.setText(_translate("MainWindow", "上一张"))
        self.pushButton_next.setText(_translate("MainWindow", "下一张"))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = photo.Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    # pyinstaller -F -w photo.py 生成exe